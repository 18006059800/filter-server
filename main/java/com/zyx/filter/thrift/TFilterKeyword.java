/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zyx.filter.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 关键字
 */
public class TFilterKeyword implements org.apache.thrift.TBase<TFilterKeyword, TFilterKeyword._Fields>, java.io.Serializable, Cloneable, Comparable<TFilterKeyword> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFilterKeyword");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_REGULAR_FIELD_DESC = new org.apache.thrift.protocol.TField("isRegular", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BEHAVIOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("behavior_type", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REPLACEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("replacement", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField APPEAR_TIMES_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("appear_times_limit", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_id", org.apache.thrift.protocol.TType.STRING, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFilterKeywordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFilterKeywordTupleSchemeFactory());
  }

  public String _id; // optional
  public boolean isRegular; // optional
  /**
   * 是否是正则表达式
   */
  public String keyword; // required
  /**
   * 关键字
   * 
   * @see TBehaviorType
   */
  public TBehaviorType behavior_type; // optional
  /**
   * 过滤行为类型
   */
  public String replacement; // optional
  /**
   * 如果behavior_type==REPLACE,该字段代表代替的内容，否则无用
   * 
   * @see TFilterLevel
   */
  public TFilterLevel level; // optional
  /**
   * 关键字过滤级别
   */
  public int appear_times_limit; // optional
  /**
   * 如果该字段不为0：则当该关键字出现了appear_times_limit次时，激活过滤级别，否则认为是ADJUST
   */
  public String filter_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    IS_REGULAR((short)5, "isRegular"),
    /**
     * 是否是正则表达式
     */
    KEYWORD((short)11, "keyword"),
    /**
     * 关键字
     * 
     * @see TBehaviorType
     */
    BEHAVIOR_TYPE((short)12, "behavior_type"),
    /**
     * 过滤行为类型
     */
    REPLACEMENT((short)13, "replacement"),
    /**
     * 如果behavior_type==REPLACE,该字段代表代替的内容，否则无用
     * 
     * @see TFilterLevel
     */
    LEVEL((short)14, "level"),
    /**
     * 关键字过滤级别
     */
    APPEAR_TIMES_LIMIT((short)15, "appear_times_limit"),
    /**
     * 如果该字段不为0：则当该关键字出现了appear_times_limit次时，激活过滤级别，否则认为是ADJUST
     */
    FILTER_ID((short)31, "filter_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 5: // IS_REGULAR
          return IS_REGULAR;
        case 11: // KEYWORD
          return KEYWORD;
        case 12: // BEHAVIOR_TYPE
          return BEHAVIOR_TYPE;
        case 13: // REPLACEMENT
          return REPLACEMENT;
        case 14: // LEVEL
          return LEVEL;
        case 15: // APPEAR_TIMES_LIMIT
          return APPEAR_TIMES_LIMIT;
        case 31: // FILTER_ID
          return FILTER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISREGULAR_ISSET_ID = 0;
  private static final int __APPEAR_TIMES_LIMIT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields._ID,_Fields.IS_REGULAR,_Fields.BEHAVIOR_TYPE,_Fields.REPLACEMENT,_Fields.LEVEL,_Fields.APPEAR_TIMES_LIMIT,_Fields.FILTER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_REGULAR, new org.apache.thrift.meta_data.FieldMetaData("isRegular", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEHAVIOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("behavior_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TBehaviorType.class)));
    tmpMap.put(_Fields.REPLACEMENT, new org.apache.thrift.meta_data.FieldMetaData("replacement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFilterLevel.class)));
    tmpMap.put(_Fields.APPEAR_TIMES_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("appear_times_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filter_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFilterKeyword.class, metaDataMap);
  }

  public TFilterKeyword() {
    this.behavior_type = com.zyx.filter.thrift.TBehaviorType.NONE;

    this.level = com.zyx.filter.thrift.TFilterLevel.ADJUST;

  }

  public TFilterKeyword(
    String keyword)
  {
    this();
    this.keyword = keyword;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFilterKeyword(TFilterKeyword other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_id()) {
      this._id = other._id;
    }
    this.isRegular = other.isRegular;
    if (other.isSetKeyword()) {
      this.keyword = other.keyword;
    }
    if (other.isSetBehavior_type()) {
      this.behavior_type = other.behavior_type;
    }
    if (other.isSetReplacement()) {
      this.replacement = other.replacement;
    }
    if (other.isSetLevel()) {
      this.level = other.level;
    }
    this.appear_times_limit = other.appear_times_limit;
    if (other.isSetFilter_id()) {
      this.filter_id = other.filter_id;
    }
  }

  public TFilterKeyword deepCopy() {
    return new TFilterKeyword(this);
  }

  @Override
  public void clear() {
    this._id = null;
    setIsRegularIsSet(false);
    this.isRegular = false;
    this.keyword = null;
    this.behavior_type = com.zyx.filter.thrift.TBehaviorType.NONE;

    this.replacement = null;
    this.level = com.zyx.filter.thrift.TFilterLevel.ADJUST;

    setAppear_times_limitIsSet(false);
    this.appear_times_limit = 0;
    this.filter_id = null;
  }

  public String get_id() {
    return this._id;
  }

  public TFilterKeyword set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  public boolean isIsRegular() {
    return this.isRegular;
  }

  public TFilterKeyword setIsRegular(boolean isRegular) {
    this.isRegular = isRegular;
    setIsRegularIsSet(true);
    return this;
  }

  public void unsetIsRegular() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREGULAR_ISSET_ID);
  }

  /** Returns true if field isRegular is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRegular() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREGULAR_ISSET_ID);
  }

  public void setIsRegularIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREGULAR_ISSET_ID, value);
  }

  /**
   * 是否是正则表达式
   */
  public String getKeyword() {
    return this.keyword;
  }

  /**
   * 是否是正则表达式
   */
  public TFilterKeyword setKeyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  public void unsetKeyword() {
    this.keyword = null;
  }

  /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword() {
    return this.keyword != null;
  }

  public void setKeywordIsSet(boolean value) {
    if (!value) {
      this.keyword = null;
    }
  }

  /**
   * 关键字
   * 
   * @see TBehaviorType
   */
  public TBehaviorType getBehavior_type() {
    return this.behavior_type;
  }

  /**
   * 关键字
   * 
   * @see TBehaviorType
   */
  public TFilterKeyword setBehavior_type(TBehaviorType behavior_type) {
    this.behavior_type = behavior_type;
    return this;
  }

  public void unsetBehavior_type() {
    this.behavior_type = null;
  }

  /** Returns true if field behavior_type is set (has been assigned a value) and false otherwise */
  public boolean isSetBehavior_type() {
    return this.behavior_type != null;
  }

  public void setBehavior_typeIsSet(boolean value) {
    if (!value) {
      this.behavior_type = null;
    }
  }

  /**
   * 过滤行为类型
   */
  public String getReplacement() {
    return this.replacement;
  }

  /**
   * 过滤行为类型
   */
  public TFilterKeyword setReplacement(String replacement) {
    this.replacement = replacement;
    return this;
  }

  public void unsetReplacement() {
    this.replacement = null;
  }

  /** Returns true if field replacement is set (has been assigned a value) and false otherwise */
  public boolean isSetReplacement() {
    return this.replacement != null;
  }

  public void setReplacementIsSet(boolean value) {
    if (!value) {
      this.replacement = null;
    }
  }

  /**
   * 如果behavior_type==REPLACE,该字段代表代替的内容，否则无用
   * 
   * @see TFilterLevel
   */
  public TFilterLevel getLevel() {
    return this.level;
  }

  /**
   * 如果behavior_type==REPLACE,该字段代表代替的内容，否则无用
   * 
   * @see TFilterLevel
   */
  public TFilterKeyword setLevel(TFilterLevel level) {
    this.level = level;
    return this;
  }

  public void unsetLevel() {
    this.level = null;
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return this.level != null;
  }

  public void setLevelIsSet(boolean value) {
    if (!value) {
      this.level = null;
    }
  }

  /**
   * 关键字过滤级别
   */
  public int getAppear_times_limit() {
    return this.appear_times_limit;
  }

  /**
   * 关键字过滤级别
   */
  public TFilterKeyword setAppear_times_limit(int appear_times_limit) {
    this.appear_times_limit = appear_times_limit;
    setAppear_times_limitIsSet(true);
    return this;
  }

  public void unsetAppear_times_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPEAR_TIMES_LIMIT_ISSET_ID);
  }

  /** Returns true if field appear_times_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetAppear_times_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __APPEAR_TIMES_LIMIT_ISSET_ID);
  }

  public void setAppear_times_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPEAR_TIMES_LIMIT_ISSET_ID, value);
  }

  /**
   * 如果该字段不为0：则当该关键字出现了appear_times_limit次时，激活过滤级别，否则认为是ADJUST
   */
  public String getFilter_id() {
    return this.filter_id;
  }

  /**
   * 如果该字段不为0：则当该关键字出现了appear_times_limit次时，激活过滤级别，否则认为是ADJUST
   */
  public TFilterKeyword setFilter_id(String filter_id) {
    this.filter_id = filter_id;
    return this;
  }

  public void unsetFilter_id() {
    this.filter_id = null;
  }

  /** Returns true if field filter_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_id() {
    return this.filter_id != null;
  }

  public void setFilter_idIsSet(boolean value) {
    if (!value) {
      this.filter_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case IS_REGULAR:
      if (value == null) {
        unsetIsRegular();
      } else {
        setIsRegular((Boolean)value);
      }
      break;

    case KEYWORD:
      if (value == null) {
        unsetKeyword();
      } else {
        setKeyword((String)value);
      }
      break;

    case BEHAVIOR_TYPE:
      if (value == null) {
        unsetBehavior_type();
      } else {
        setBehavior_type((TBehaviorType)value);
      }
      break;

    case REPLACEMENT:
      if (value == null) {
        unsetReplacement();
      } else {
        setReplacement((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((TFilterLevel)value);
      }
      break;

    case APPEAR_TIMES_LIMIT:
      if (value == null) {
        unsetAppear_times_limit();
      } else {
        setAppear_times_limit((Integer)value);
      }
      break;

    case FILTER_ID:
      if (value == null) {
        unsetFilter_id();
      } else {
        setFilter_id((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case IS_REGULAR:
      return Boolean.valueOf(isIsRegular());

    case KEYWORD:
      return getKeyword();

    case BEHAVIOR_TYPE:
      return getBehavior_type();

    case REPLACEMENT:
      return getReplacement();

    case LEVEL:
      return getLevel();

    case APPEAR_TIMES_LIMIT:
      return Integer.valueOf(getAppear_times_limit());

    case FILTER_ID:
      return getFilter_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case IS_REGULAR:
      return isSetIsRegular();
    case KEYWORD:
      return isSetKeyword();
    case BEHAVIOR_TYPE:
      return isSetBehavior_type();
    case REPLACEMENT:
      return isSetReplacement();
    case LEVEL:
      return isSetLevel();
    case APPEAR_TIMES_LIMIT:
      return isSetAppear_times_limit();
    case FILTER_ID:
      return isSetFilter_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFilterKeyword)
      return this.equals((TFilterKeyword)that);
    return false;
  }

  public boolean equals(TFilterKeyword that) {
    if (that == null)
      return false;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present_isRegular = true && this.isSetIsRegular();
    boolean that_present_isRegular = true && that.isSetIsRegular();
    if (this_present_isRegular || that_present_isRegular) {
      if (!(this_present_isRegular && that_present_isRegular))
        return false;
      if (this.isRegular != that.isRegular)
        return false;
    }

    boolean this_present_keyword = true && this.isSetKeyword();
    boolean that_present_keyword = true && that.isSetKeyword();
    if (this_present_keyword || that_present_keyword) {
      if (!(this_present_keyword && that_present_keyword))
        return false;
      if (!this.keyword.equals(that.keyword))
        return false;
    }

    boolean this_present_behavior_type = true && this.isSetBehavior_type();
    boolean that_present_behavior_type = true && that.isSetBehavior_type();
    if (this_present_behavior_type || that_present_behavior_type) {
      if (!(this_present_behavior_type && that_present_behavior_type))
        return false;
      if (!this.behavior_type.equals(that.behavior_type))
        return false;
    }

    boolean this_present_replacement = true && this.isSetReplacement();
    boolean that_present_replacement = true && that.isSetReplacement();
    if (this_present_replacement || that_present_replacement) {
      if (!(this_present_replacement && that_present_replacement))
        return false;
      if (!this.replacement.equals(that.replacement))
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (!this.level.equals(that.level))
        return false;
    }

    boolean this_present_appear_times_limit = true && this.isSetAppear_times_limit();
    boolean that_present_appear_times_limit = true && that.isSetAppear_times_limit();
    if (this_present_appear_times_limit || that_present_appear_times_limit) {
      if (!(this_present_appear_times_limit && that_present_appear_times_limit))
        return false;
      if (this.appear_times_limit != that.appear_times_limit)
        return false;
    }

    boolean this_present_filter_id = true && this.isSetFilter_id();
    boolean that_present_filter_id = true && that.isSetFilter_id();
    if (this_present_filter_id || that_present_filter_id) {
      if (!(this_present_filter_id && that_present_filter_id))
        return false;
      if (!this.filter_id.equals(that.filter_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TFilterKeyword other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRegular()).compareTo(other.isSetIsRegular());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRegular()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRegular, other.isRegular);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBehavior_type()).compareTo(other.isSetBehavior_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBehavior_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavior_type, other.behavior_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplacement()).compareTo(other.isSetReplacement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplacement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replacement, other.replacement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppear_times_limit()).compareTo(other.isSetAppear_times_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppear_times_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appear_times_limit, other.appear_times_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_id()).compareTo(other.isSetFilter_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_id, other.filter_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFilterKeyword(");
    boolean first = true;

    if (isSet_id()) {
      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
    }
    if (isSetIsRegular()) {
      if (!first) sb.append(", ");
      sb.append("isRegular:");
      sb.append(this.isRegular);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("keyword:");
    if (this.keyword == null) {
      sb.append("null");
    } else {
      sb.append(this.keyword);
    }
    first = false;
    if (isSetBehavior_type()) {
      if (!first) sb.append(", ");
      sb.append("behavior_type:");
      if (this.behavior_type == null) {
        sb.append("null");
      } else {
        sb.append(this.behavior_type);
      }
      first = false;
    }
    if (isSetReplacement()) {
      if (!first) sb.append(", ");
      sb.append("replacement:");
      if (this.replacement == null) {
        sb.append("null");
      } else {
        sb.append(this.replacement);
      }
      first = false;
    }
    if (isSetLevel()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
    }
    if (isSetAppear_times_limit()) {
      if (!first) sb.append(", ");
      sb.append("appear_times_limit:");
      sb.append(this.appear_times_limit);
      first = false;
    }
    if (isSetFilter_id()) {
      if (!first) sb.append(", ");
      sb.append("filter_id:");
      if (this.filter_id == null) {
        sb.append("null");
      } else {
        sb.append(this.filter_id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (keyword == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyword' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFilterKeywordStandardSchemeFactory implements SchemeFactory {
    public TFilterKeywordStandardScheme getScheme() {
      return new TFilterKeywordStandardScheme();
    }
  }

  private static class TFilterKeywordStandardScheme extends StandardScheme<TFilterKeyword> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFilterKeyword struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_REGULAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRegular = iprot.readBool();
              struct.setIsRegularIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // KEYWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyword = iprot.readString();
              struct.setKeywordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BEHAVIOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.behavior_type = TBehaviorType.findByValue(iprot.readI32());
              struct.setBehavior_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REPLACEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replacement = iprot.readString();
              struct.setReplacementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = TFilterLevel.findByValue(iprot.readI32());
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // APPEAR_TIMES_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appear_times_limit = iprot.readI32();
              struct.setAppear_times_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // FILTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filter_id = iprot.readString();
              struct.setFilter_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFilterKeyword struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        if (struct.isSet_id()) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRegular()) {
        oprot.writeFieldBegin(IS_REGULAR_FIELD_DESC);
        oprot.writeBool(struct.isRegular);
        oprot.writeFieldEnd();
      }
      if (struct.keyword != null) {
        oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
        oprot.writeString(struct.keyword);
        oprot.writeFieldEnd();
      }
      if (struct.behavior_type != null) {
        if (struct.isSetBehavior_type()) {
          oprot.writeFieldBegin(BEHAVIOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.behavior_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.replacement != null) {
        if (struct.isSetReplacement()) {
          oprot.writeFieldBegin(REPLACEMENT_FIELD_DESC);
          oprot.writeString(struct.replacement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.level != null) {
        if (struct.isSetLevel()) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeI32(struct.level.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAppear_times_limit()) {
        oprot.writeFieldBegin(APPEAR_TIMES_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.appear_times_limit);
        oprot.writeFieldEnd();
      }
      if (struct.filter_id != null) {
        if (struct.isSetFilter_id()) {
          oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
          oprot.writeString(struct.filter_id);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFilterKeywordTupleSchemeFactory implements SchemeFactory {
    public TFilterKeywordTupleScheme getScheme() {
      return new TFilterKeywordTupleScheme();
    }
  }

  private static class TFilterKeywordTupleScheme extends TupleScheme<TFilterKeyword> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFilterKeyword struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.keyword);
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetIsRegular()) {
        optionals.set(1);
      }
      if (struct.isSetBehavior_type()) {
        optionals.set(2);
      }
      if (struct.isSetReplacement()) {
        optionals.set(3);
      }
      if (struct.isSetLevel()) {
        optionals.set(4);
      }
      if (struct.isSetAppear_times_limit()) {
        optionals.set(5);
      }
      if (struct.isSetFilter_id()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSet_id()) {
        oprot.writeString(struct._id);
      }
      if (struct.isSetIsRegular()) {
        oprot.writeBool(struct.isRegular);
      }
      if (struct.isSetBehavior_type()) {
        oprot.writeI32(struct.behavior_type.getValue());
      }
      if (struct.isSetReplacement()) {
        oprot.writeString(struct.replacement);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level.getValue());
      }
      if (struct.isSetAppear_times_limit()) {
        oprot.writeI32(struct.appear_times_limit);
      }
      if (struct.isSetFilter_id()) {
        oprot.writeString(struct.filter_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFilterKeyword struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.keyword = iprot.readString();
      struct.setKeywordIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct._id = iprot.readString();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isRegular = iprot.readBool();
        struct.setIsRegularIsSet(true);
      }
      if (incoming.get(2)) {
        struct.behavior_type = TBehaviorType.findByValue(iprot.readI32());
        struct.setBehavior_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.replacement = iprot.readString();
        struct.setReplacementIsSet(true);
      }
      if (incoming.get(4)) {
        struct.level = TFilterLevel.findByValue(iprot.readI32());
        struct.setLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appear_times_limit = iprot.readI32();
        struct.setAppear_times_limitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.filter_id = iprot.readString();
        struct.setFilter_idIsSet(true);
      }
    }
  }

}

