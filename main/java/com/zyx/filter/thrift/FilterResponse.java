/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zyx.filter.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 过滤结果
 */
public class FilterResponse implements org.apache.thrift.TBase<FilterResponse, FilterResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FilterResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FilterResponse");

  private static final org.apache.thrift.protocol.TField JUDGE_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("judgeResult", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField RESULT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("resultMap", org.apache.thrift.protocol.TType.MAP, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FilterResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FilterResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see TJudgeResult
   */
  public TJudgeResult judgeResult; // required
  public Map<String,String> resultMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TJudgeResult
     */
    JUDGE_RESULT((short)11, "judgeResult"),
    RESULT_MAP((short)12, "resultMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 11: // JUDGE_RESULT
          return JUDGE_RESULT;
        case 12: // RESULT_MAP
          return RESULT_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JUDGE_RESULT, new org.apache.thrift.meta_data.FieldMetaData("judgeResult", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJudgeResult.class)));
    tmpMap.put(_Fields.RESULT_MAP, new org.apache.thrift.meta_data.FieldMetaData("resultMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FilterResponse.class, metaDataMap);
  }

  public FilterResponse() {
  }

  public FilterResponse(
    TJudgeResult judgeResult,
    Map<String,String> resultMap)
  {
    this();
    this.judgeResult = judgeResult;
    this.resultMap = resultMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FilterResponse(FilterResponse other) {
    if (other.isSetJudgeResult()) {
      this.judgeResult = other.judgeResult;
    }
    if (other.isSetResultMap()) {
      Map<String,String> __this__resultMap = new HashMap<String,String>(other.resultMap);
      this.resultMap = __this__resultMap;
    }
  }

  public FilterResponse deepCopy() {
    return new FilterResponse(this);
  }

  @Override
  public void clear() {
    this.judgeResult = null;
    this.resultMap = null;
  }

  /**
   * 
   * @see TJudgeResult
   */
  public TJudgeResult getJudgeResult() {
    return this.judgeResult;
  }

  /**
   * 
   * @see TJudgeResult
   */
  public FilterResponse setJudgeResult(TJudgeResult judgeResult) {
    this.judgeResult = judgeResult;
    return this;
  }

  public void unsetJudgeResult() {
    this.judgeResult = null;
  }

  /** Returns true if field judgeResult is set (has been assigned a value) and false otherwise */
  public boolean isSetJudgeResult() {
    return this.judgeResult != null;
  }

  public void setJudgeResultIsSet(boolean value) {
    if (!value) {
      this.judgeResult = null;
    }
  }

  public int getResultMapSize() {
    return (this.resultMap == null) ? 0 : this.resultMap.size();
  }

  public void putToResultMap(String key, String val) {
    if (this.resultMap == null) {
      this.resultMap = new HashMap<String,String>();
    }
    this.resultMap.put(key, val);
  }

  public Map<String,String> getResultMap() {
    return this.resultMap;
  }

  public FilterResponse setResultMap(Map<String,String> resultMap) {
    this.resultMap = resultMap;
    return this;
  }

  public void unsetResultMap() {
    this.resultMap = null;
  }

  /** Returns true if field resultMap is set (has been assigned a value) and false otherwise */
  public boolean isSetResultMap() {
    return this.resultMap != null;
  }

  public void setResultMapIsSet(boolean value) {
    if (!value) {
      this.resultMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JUDGE_RESULT:
      if (value == null) {
        unsetJudgeResult();
      } else {
        setJudgeResult((TJudgeResult)value);
      }
      break;

    case RESULT_MAP:
      if (value == null) {
        unsetResultMap();
      } else {
        setResultMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JUDGE_RESULT:
      return getJudgeResult();

    case RESULT_MAP:
      return getResultMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JUDGE_RESULT:
      return isSetJudgeResult();
    case RESULT_MAP:
      return isSetResultMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FilterResponse)
      return this.equals((FilterResponse)that);
    return false;
  }

  public boolean equals(FilterResponse that) {
    if (that == null)
      return false;

    boolean this_present_judgeResult = true && this.isSetJudgeResult();
    boolean that_present_judgeResult = true && that.isSetJudgeResult();
    if (this_present_judgeResult || that_present_judgeResult) {
      if (!(this_present_judgeResult && that_present_judgeResult))
        return false;
      if (!this.judgeResult.equals(that.judgeResult))
        return false;
    }

    boolean this_present_resultMap = true && this.isSetResultMap();
    boolean that_present_resultMap = true && that.isSetResultMap();
    if (this_present_resultMap || that_present_resultMap) {
      if (!(this_present_resultMap && that_present_resultMap))
        return false;
      if (!this.resultMap.equals(that.resultMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FilterResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJudgeResult()).compareTo(other.isSetJudgeResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJudgeResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judgeResult, other.judgeResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultMap()).compareTo(other.isSetResultMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultMap, other.resultMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FilterResponse(");
    boolean first = true;

    sb.append("judgeResult:");
    if (this.judgeResult == null) {
      sb.append("null");
    } else {
      sb.append(this.judgeResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultMap:");
    if (this.resultMap == null) {
      sb.append("null");
    } else {
      sb.append(this.resultMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (judgeResult == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'judgeResult' was not present! Struct: " + toString());
    }
    if (resultMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultMap' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FilterResponseStandardSchemeFactory implements SchemeFactory {
    public FilterResponseStandardScheme getScheme() {
      return new FilterResponseStandardScheme();
    }
  }

  private static class FilterResponseStandardScheme extends StandardScheme<FilterResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FilterResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 11: // JUDGE_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.judgeResult = TJudgeResult.findByValue(iprot.readI32());
              struct.setJudgeResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESULT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
                struct.resultMap = new HashMap<String,String>(2*_map28.size);
                for (int _i29 = 0; _i29 < _map28.size; ++_i29)
                {
                  String _key30;
                  String _val31;
                  _key30 = iprot.readString();
                  _val31 = iprot.readString();
                  struct.resultMap.put(_key30, _val31);
                }
                iprot.readMapEnd();
              }
              struct.setResultMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FilterResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.judgeResult != null) {
        oprot.writeFieldBegin(JUDGE_RESULT_FIELD_DESC);
        oprot.writeI32(struct.judgeResult.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.resultMap != null) {
        oprot.writeFieldBegin(RESULT_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.resultMap.size()));
          for (Map.Entry<String, String> _iter32 : struct.resultMap.entrySet())
          {
            oprot.writeString(_iter32.getKey());
            oprot.writeString(_iter32.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FilterResponseTupleSchemeFactory implements SchemeFactory {
    public FilterResponseTupleScheme getScheme() {
      return new FilterResponseTupleScheme();
    }
  }

  private static class FilterResponseTupleScheme extends TupleScheme<FilterResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FilterResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.judgeResult.getValue());
      {
        oprot.writeI32(struct.resultMap.size());
        for (Map.Entry<String, String> _iter33 : struct.resultMap.entrySet())
        {
          oprot.writeString(_iter33.getKey());
          oprot.writeString(_iter33.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FilterResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.judgeResult = TJudgeResult.findByValue(iprot.readI32());
      struct.setJudgeResultIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map34 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.resultMap = new HashMap<String,String>(2*_map34.size);
        for (int _i35 = 0; _i35 < _map34.size; ++_i35)
        {
          String _key36;
          String _val37;
          _key36 = iprot.readString();
          _val37 = iprot.readString();
          struct.resultMap.put(_key36, _val37);
        }
      }
      struct.setResultMapIsSet(true);
    }
  }

}

