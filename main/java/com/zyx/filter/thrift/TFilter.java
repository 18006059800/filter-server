/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zyx.filter.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TFilter implements org.apache.thrift.TBase<TFilter, TFilter._Fields>, java.io.Serializable, Cloneable, Comparable<TFilter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFilter");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BUSINESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("business_id", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BUSINESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("business_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TEXT_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("textFilter", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField FREQUENCY_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("frequencyFilter", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFilterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFilterTupleSchemeFactory());
  }

  public String _id; // optional
  public String name; // required
  public String field; // optional
  public String business_id; // optional
  public String business_name; // optional
  /**
   * 
   * @see TFilterType
   */
  public TFilterType type; // optional
  public TTextFilter textFilter; // optional
  public TFrequencyFilter frequencyFilter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    NAME((short)4, "name"),
    FIELD((short)5, "field"),
    BUSINESS_ID((short)6, "business_id"),
    BUSINESS_NAME((short)7, "business_name"),
    /**
     * 
     * @see TFilterType
     */
    TYPE((short)11, "type"),
    TEXT_FILTER((short)12, "textFilter"),
    FREQUENCY_FILTER((short)13, "frequencyFilter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 4: // NAME
          return NAME;
        case 5: // FIELD
          return FIELD;
        case 6: // BUSINESS_ID
          return BUSINESS_ID;
        case 7: // BUSINESS_NAME
          return BUSINESS_NAME;
        case 11: // TYPE
          return TYPE;
        case 12: // TEXT_FILTER
          return TEXT_FILTER;
        case 13: // FREQUENCY_FILTER
          return FREQUENCY_FILTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields._ID,_Fields.FIELD,_Fields.BUSINESS_ID,_Fields.BUSINESS_NAME,_Fields.TYPE,_Fields.TEXT_FILTER,_Fields.FREQUENCY_FILTER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_ID, new org.apache.thrift.meta_data.FieldMetaData("business_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("business_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFilterType.class)));
    tmpMap.put(_Fields.TEXT_FILTER, new org.apache.thrift.meta_data.FieldMetaData("textFilter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTextFilter.class)));
    tmpMap.put(_Fields.FREQUENCY_FILTER, new org.apache.thrift.meta_data.FieldMetaData("frequencyFilter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFrequencyFilter.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFilter.class, metaDataMap);
  }

  public TFilter() {
  }

  public TFilter(
    String name)
  {
    this();
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFilter(TFilter other) {
    if (other.isSet_id()) {
      this._id = other._id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetField()) {
      this.field = other.field;
    }
    if (other.isSetBusiness_id()) {
      this.business_id = other.business_id;
    }
    if (other.isSetBusiness_name()) {
      this.business_name = other.business_name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetTextFilter()) {
      this.textFilter = new TTextFilter(other.textFilter);
    }
    if (other.isSetFrequencyFilter()) {
      this.frequencyFilter = new TFrequencyFilter(other.frequencyFilter);
    }
  }

  public TFilter deepCopy() {
    return new TFilter(this);
  }

  @Override
  public void clear() {
    this._id = null;
    this.name = null;
    this.field = null;
    this.business_id = null;
    this.business_name = null;
    this.type = null;
    this.textFilter = null;
    this.frequencyFilter = null;
  }

  public String get_id() {
    return this._id;
  }

  public TFilter set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TFilter setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getField() {
    return this.field;
  }

  public TFilter setField(String field) {
    this.field = field;
    return this;
  }

  public void unsetField() {
    this.field = null;
  }

  /** Returns true if field field is set (has been assigned a value) and false otherwise */
  public boolean isSetField() {
    return this.field != null;
  }

  public void setFieldIsSet(boolean value) {
    if (!value) {
      this.field = null;
    }
  }

  public String getBusiness_id() {
    return this.business_id;
  }

  public TFilter setBusiness_id(String business_id) {
    this.business_id = business_id;
    return this;
  }

  public void unsetBusiness_id() {
    this.business_id = null;
  }

  /** Returns true if field business_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBusiness_id() {
    return this.business_id != null;
  }

  public void setBusiness_idIsSet(boolean value) {
    if (!value) {
      this.business_id = null;
    }
  }

  public String getBusiness_name() {
    return this.business_name;
  }

  public TFilter setBusiness_name(String business_name) {
    this.business_name = business_name;
    return this;
  }

  public void unsetBusiness_name() {
    this.business_name = null;
  }

  /** Returns true if field business_name is set (has been assigned a value) and false otherwise */
  public boolean isSetBusiness_name() {
    return this.business_name != null;
  }

  public void setBusiness_nameIsSet(boolean value) {
    if (!value) {
      this.business_name = null;
    }
  }

  /**
   * 
   * @see TFilterType
   */
  public TFilterType getType() {
    return this.type;
  }

  /**
   * 
   * @see TFilterType
   */
  public TFilter setType(TFilterType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public TTextFilter getTextFilter() {
    return this.textFilter;
  }

  public TFilter setTextFilter(TTextFilter textFilter) {
    this.textFilter = textFilter;
    return this;
  }

  public void unsetTextFilter() {
    this.textFilter = null;
  }

  /** Returns true if field textFilter is set (has been assigned a value) and false otherwise */
  public boolean isSetTextFilter() {
    return this.textFilter != null;
  }

  public void setTextFilterIsSet(boolean value) {
    if (!value) {
      this.textFilter = null;
    }
  }

  public TFrequencyFilter getFrequencyFilter() {
    return this.frequencyFilter;
  }

  public TFilter setFrequencyFilter(TFrequencyFilter frequencyFilter) {
    this.frequencyFilter = frequencyFilter;
    return this;
  }

  public void unsetFrequencyFilter() {
    this.frequencyFilter = null;
  }

  /** Returns true if field frequencyFilter is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequencyFilter() {
    return this.frequencyFilter != null;
  }

  public void setFrequencyFilterIsSet(boolean value) {
    if (!value) {
      this.frequencyFilter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case FIELD:
      if (value == null) {
        unsetField();
      } else {
        setField((String)value);
      }
      break;

    case BUSINESS_ID:
      if (value == null) {
        unsetBusiness_id();
      } else {
        setBusiness_id((String)value);
      }
      break;

    case BUSINESS_NAME:
      if (value == null) {
        unsetBusiness_name();
      } else {
        setBusiness_name((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TFilterType)value);
      }
      break;

    case TEXT_FILTER:
      if (value == null) {
        unsetTextFilter();
      } else {
        setTextFilter((TTextFilter)value);
      }
      break;

    case FREQUENCY_FILTER:
      if (value == null) {
        unsetFrequencyFilter();
      } else {
        setFrequencyFilter((TFrequencyFilter)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case NAME:
      return getName();

    case FIELD:
      return getField();

    case BUSINESS_ID:
      return getBusiness_id();

    case BUSINESS_NAME:
      return getBusiness_name();

    case TYPE:
      return getType();

    case TEXT_FILTER:
      return getTextFilter();

    case FREQUENCY_FILTER:
      return getFrequencyFilter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case NAME:
      return isSetName();
    case FIELD:
      return isSetField();
    case BUSINESS_ID:
      return isSetBusiness_id();
    case BUSINESS_NAME:
      return isSetBusiness_name();
    case TYPE:
      return isSetType();
    case TEXT_FILTER:
      return isSetTextFilter();
    case FREQUENCY_FILTER:
      return isSetFrequencyFilter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFilter)
      return this.equals((TFilter)that);
    return false;
  }

  public boolean equals(TFilter that) {
    if (that == null)
      return false;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_field = true && this.isSetField();
    boolean that_present_field = true && that.isSetField();
    if (this_present_field || that_present_field) {
      if (!(this_present_field && that_present_field))
        return false;
      if (!this.field.equals(that.field))
        return false;
    }

    boolean this_present_business_id = true && this.isSetBusiness_id();
    boolean that_present_business_id = true && that.isSetBusiness_id();
    if (this_present_business_id || that_present_business_id) {
      if (!(this_present_business_id && that_present_business_id))
        return false;
      if (!this.business_id.equals(that.business_id))
        return false;
    }

    boolean this_present_business_name = true && this.isSetBusiness_name();
    boolean that_present_business_name = true && that.isSetBusiness_name();
    if (this_present_business_name || that_present_business_name) {
      if (!(this_present_business_name && that_present_business_name))
        return false;
      if (!this.business_name.equals(that.business_name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_textFilter = true && this.isSetTextFilter();
    boolean that_present_textFilter = true && that.isSetTextFilter();
    if (this_present_textFilter || that_present_textFilter) {
      if (!(this_present_textFilter && that_present_textFilter))
        return false;
      if (!this.textFilter.equals(that.textFilter))
        return false;
    }

    boolean this_present_frequencyFilter = true && this.isSetFrequencyFilter();
    boolean that_present_frequencyFilter = true && that.isSetFrequencyFilter();
    if (this_present_frequencyFilter || that_present_frequencyFilter) {
      if (!(this_present_frequencyFilter && that_present_frequencyFilter))
        return false;
      if (!this.frequencyFilter.equals(that.frequencyFilter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusiness_id()).compareTo(other.isSetBusiness_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusiness_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.business_id, other.business_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusiness_name()).compareTo(other.isSetBusiness_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusiness_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.business_name, other.business_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextFilter()).compareTo(other.isSetTextFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textFilter, other.textFilter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequencyFilter()).compareTo(other.isSetFrequencyFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequencyFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequencyFilter, other.frequencyFilter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFilter(");
    boolean first = true;

    if (isSet_id()) {
      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetField()) {
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
    }
    if (isSetBusiness_id()) {
      if (!first) sb.append(", ");
      sb.append("business_id:");
      if (this.business_id == null) {
        sb.append("null");
      } else {
        sb.append(this.business_id);
      }
      first = false;
    }
    if (isSetBusiness_name()) {
      if (!first) sb.append(", ");
      sb.append("business_name:");
      if (this.business_name == null) {
        sb.append("null");
      } else {
        sb.append(this.business_name);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetTextFilter()) {
      if (!first) sb.append(", ");
      sb.append("textFilter:");
      if (this.textFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.textFilter);
      }
      first = false;
    }
    if (isSetFrequencyFilter()) {
      if (!first) sb.append(", ");
      sb.append("frequencyFilter:");
      if (this.frequencyFilter == null) {
        sb.append("null");
      } else {
        sb.append(this.frequencyFilter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (textFilter != null) {
      textFilter.validate();
    }
    if (frequencyFilter != null) {
      frequencyFilter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFilterStandardSchemeFactory implements SchemeFactory {
    public TFilterStandardScheme getScheme() {
      return new TFilterStandardScheme();
    }
  }

  private static class TFilterStandardScheme extends StandardScheme<TFilter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field = iprot.readString();
              struct.setFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BUSINESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.business_id = iprot.readString();
              struct.setBusiness_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BUSINESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.business_name = iprot.readString();
              struct.setBusiness_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TFilterType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TEXT_FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.textFilter = new TTextFilter();
              struct.textFilter.read(iprot);
              struct.setTextFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FREQUENCY_FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.frequencyFilter = new TFrequencyFilter();
              struct.frequencyFilter.read(iprot);
              struct.setFrequencyFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        if (struct.isSet_id()) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.field != null) {
        if (struct.isSetField()) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
      }
      if (struct.business_id != null) {
        if (struct.isSetBusiness_id()) {
          oprot.writeFieldBegin(BUSINESS_ID_FIELD_DESC);
          oprot.writeString(struct.business_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.business_name != null) {
        if (struct.isSetBusiness_name()) {
          oprot.writeFieldBegin(BUSINESS_NAME_FIELD_DESC);
          oprot.writeString(struct.business_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.textFilter != null) {
        if (struct.isSetTextFilter()) {
          oprot.writeFieldBegin(TEXT_FILTER_FIELD_DESC);
          struct.textFilter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.frequencyFilter != null) {
        if (struct.isSetFrequencyFilter()) {
          oprot.writeFieldBegin(FREQUENCY_FILTER_FIELD_DESC);
          struct.frequencyFilter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFilterTupleSchemeFactory implements SchemeFactory {
    public TFilterTupleScheme getScheme() {
      return new TFilterTupleScheme();
    }
  }

  private static class TFilterTupleScheme extends TupleScheme<TFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetField()) {
        optionals.set(1);
      }
      if (struct.isSetBusiness_id()) {
        optionals.set(2);
      }
      if (struct.isSetBusiness_name()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetTextFilter()) {
        optionals.set(5);
      }
      if (struct.isSetFrequencyFilter()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSet_id()) {
        oprot.writeString(struct._id);
      }
      if (struct.isSetField()) {
        oprot.writeString(struct.field);
      }
      if (struct.isSetBusiness_id()) {
        oprot.writeString(struct.business_id);
      }
      if (struct.isSetBusiness_name()) {
        oprot.writeString(struct.business_name);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTextFilter()) {
        struct.textFilter.write(oprot);
      }
      if (struct.isSetFrequencyFilter()) {
        struct.frequencyFilter.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct._id = iprot.readString();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.field = iprot.readString();
        struct.setFieldIsSet(true);
      }
      if (incoming.get(2)) {
        struct.business_id = iprot.readString();
        struct.setBusiness_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.business_name = iprot.readString();
        struct.setBusiness_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = TFilterType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.textFilter = new TTextFilter();
        struct.textFilter.read(iprot);
        struct.setTextFilterIsSet(true);
      }
      if (incoming.get(6)) {
        struct.frequencyFilter = new TFrequencyFilter();
        struct.frequencyFilter.read(iprot);
        struct.setFrequencyFilterIsSet(true);
      }
    }
  }

}

